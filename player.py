import random
class Player:
    def __init__(self, nom_boss):
        # Tes attributs existants...
        self.nom_boss = nom_boss
        self.argent = 10000
        self.subordonnes = []
        
        # NOUVELLES FONCTIONNALIT√âS :
        self.r√©putation = 0  # -100 √† +100
        self.niveau_organisation = 1
        self.territoires_contr√¥l√©s = []
        self.comp√©tences_organisation = []
        self.dette = 0
        self.moral_g√©n√©ral = 70
        self.missions_r√©ussies = 0
        self.missions_√©chou√©es = 0
        self.tour_actuel = 1
        self.√©v√©nements_en_cours = []
        
    def calculer_puissance_totale(self):
        """Calcule la puissance totale de l'organisation"""
        return sum(sub.puissance for sub in self.subordonnes)
    
    def calculer_loyaut√©_moyenne(self):
        """Calcule la loyaut√© moyenne des subordonn√©s"""
        if not self.subordonnes:
            return 0
        return sum(sub.loyaut√© for sub in self.subordonnes) / len(self.subordonnes)
    
    def peut_recruter(self):
        """V√©rifie si le joueur peut recruter (limite par niveau)"""
        limites = {1: 4, 2: 8, 3: 12, 4: 20}
        return len(self.subordonnes) < limites.get(self.niveau_organisation, 4)
    
    def promouvoir_subordonn√©(self, subordinate_index):
        """Promeut un subordonn√© (co√ªte de l'argent, boost loyaut√©/stats)"""
        if subordinate_index < len(self.subordonnes):
            sub = self.subordonnes[subordinate_index]
            co√ªt = sub.niveau * 2000
            
            if self.argent >= co√ªt:
                self.argent -= co√ªt
                sub.loyaut√© += 20
                sub.puissance += random.randint(3, 8)
                sub.moral += 15
                return f"{sub.nom} a √©t√© promu ! Loyaut√© et stats am√©lior√©es."
            else:
                return "Pas assez d'argent pour la promotion."
        return "Subordonn√© introuvable."
    
    def g√©rer_√©v√©nement_loyaut√©(self, subordinate_index):
        """G√®re un √©v√©nement de loyaut√© pour un subordonn√©"""
        if subordinate_index < len(self.subordonnes):
            sub = self.subordonnes[subordinate_index]
            √©v√©nement = sub.√©v√©nement_personnel()
            
            print(f"\nüé≠ √âV√âNEMENT PERSONNEL - {sub.nom}")
            print(f"üìñ {√©v√©nement['description']}")
            print(f"‚ùì {√©v√©nement['demande']}")
            
            choix = input("\nAcceptez-vous ? (o/n): ").lower()
            
            if choix == 'o':
                effets = √©v√©nement['impact_si_oui']
                message = f"‚úÖ Vous acceptez la demande de {sub.nom}."
            else:
                effets = √©v√©nement['impact_si_non']
                message = f"‚ùå Vous refusez la demande de {sub.nom}."
            
            # Applique les effets
            for effet, valeur in effets.items():
                if hasattr(sub, effet):
                    if isinstance(valeur, int):
                        setattr(sub, effet, getattr(sub, effet) + valeur)
                    else:
                        setattr(sub, effet, valeur)
            
            print(message)
            return True
        return False
    
    def entra√Æner_√©quipe(self):
        """Entra√Æne toute l'√©quipe contre de l'argent"""
        co√ªt_par_subordonn√© = 1000
        co√ªt_total = len(self.subordonnes) * co√ªt_par_subordonn√©
        
        if self.argent >= co√ªt_total:
            self.argent -= co√ªt_total
            am√©lior√©s = 0
            
            for sub in self.subordonnes:
                if not sub.fatigu√©:
                    sub.puissance += random.randint(1, 3)
                    sub.discr√©tion += random.randint(0, 2)
                    sub.intelligence += random.randint(0, 2)
                    sub.moral += 5
                    am√©lior√©s += 1
            
            return f"‚úÖ {am√©lior√©s} subordonn√©s entra√Æn√©s ! Co√ªt: {co√ªt_total}$"
        else:
            return f"‚ùå Pas assez d'argent (besoin: {co√ªt_total}$)"
    
    def v√©rifier_mont√©e_niveau(self):
        """V√©rifie si l'organisation peut monter de niveau"""
        conditions = {
            2: {"argent": 50000, "r√©putation": 25, "missions_r√©ussies": 10, "subordonn√©s": 6},
            3: {"argent": 200000, "r√©putation": 60, "missions_r√©ussies": 25, "subordonn√©s": 10},
            4: {"argent": 1000000, "r√©putation": 90, "missions_r√©ussies": 50, "subordonn√©s": 15}
        }
        
        niveau_suivant = self.niveau_organisation + 1
        if niveau_suivant in conditions:
            cond = conditions[niveau_suivant]
            
            if (self.argent >= cond["argent"] and 
                self.r√©putation >= cond["r√©putation"] and
                self.missions_r√©ussies >= cond["missions_r√©ussies"] and
                len(self.subordonnes) >= cond["subordonn√©s"]):
                return True
        return False
    
    def monter_niveau_organisation(self):
        """Monte d'un niveau l'organisation"""
        noms_niveaux = {1: "Petite bande", 2: "Gang organis√©", 3: "Cartel r√©gional", 4: "Empire criminel"}
        
        if self.v√©rifier_mont√©e_niveau():
            self.niveau_organisation += 1
            nouveau_nom = noms_niveaux.get(self.niveau_organisation, "Organisation myst√©rieuse")
            
            # Bonus de niveau
            bonus_argent = self.niveau_organisation * 10000
            self.argent += bonus_argent
            
            # Nouvelles comp√©tences d√©bloqu√©es
            nouvelles_comp√©tences = {
                2: ["Corruption police", "Planque s√©curis√©e"],
                3: ["R√©seau d'espions", "Territoire contr√¥l√©", "Blanchiment d'argent"],
                4: ["Empire l√©gitime", "Corruption politique", "R√©seau international"]
            }
            
            if self.niveau_organisation in nouvelles_comp√©tences:
                self.comp√©tences_organisation.extend(nouvelles_comp√©tences[self.niveau_organisation])
            
            return f"üéâ PROMOTION ! Vous √™tes maintenant: {nouveau_nom} (Niveau {self.niveau_organisation})\nüí∞ Bonus: +{bonus_argent}$"
        
        return "Conditions non remplies pour la promotion."