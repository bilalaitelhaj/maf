import random
def √©v√©nements_al√©atoires_am√©lior√©s(player):
    """Version am√©lior√©e de tes √©v√©nements al√©atoires"""
    
    # √âv√©nements bas√©s sur le contexte du joueur
    √©v√©nements_contextuels = []
    
    # Si peu d'argent
    if player.argent < 5000:
        √©v√©nements_contextuels.extend([
            {
                "nom": "Pr√™teur sur gages",
                "description": "Un usurier vous propose un pr√™t de 10000$ √† 50% d'int√©r√™ts.",
                "choix": {
                    "Accepter": {"argent": +10000, "dette": +15000, "r√©putation": -5},
                    "Refuser": {"√©v√©nement_futur": "Finances difficiles"}
                }
            },
            {
                "nom": "Mission d√©sesp√©r√©e",
                "description": "Un client douteux offre beaucoup d'argent pour une mission tr√®s risqu√©e.",
                "choix": {
                    "Accepter": {"mission_sp√©ciale": True, "risque": 200, "r√©compense": 15000},
                    "Refuser": {"s√©curit√©": True}
                }
            }
        ])
    
    # Si beaucoup de subordonn√©s
    if len(player.subordonnes) >= 6:
        √©v√©nements_contextuels.append({
            "nom": "Tensions internes",
            "description": "Des rivalit√©s apparaissent entre vos subordonn√©s.",
            "choix": {
                "Organiser une r√©union": {"moral_g√©n√©ral": +10, "temps": -1},
                "Laisser faire": {"risque_d√©part": True, "autonomie": +5},
                "Punir les fauteurs de trouble": {"discipline": +15, "loyaut√©": -8}
            }
        })
    
    # Si r√©putation √©lev√©e
    if player.r√©putation > 50:
        √©v√©nements_contextuels.append({
            "nom": "Proposition d'alliance",
            "description": "Un autre gang propose une alliance temporaire.",
            "choix": {
                "Accepter": {"alli√©": True, "missions_communes": True, "ind√©pendance": -10},
                "Refuser": {"r√©putation": +5, "ennemi_potentiel": True}
            }
        })
    
    # Ajoute tes √©v√©nements existants
    √©v√©nements_classiques = [
        {"nom": "D√©couverte d'argent", "effet": {"argent": random.randint(1000, 5000)}},
        {"nom": "Probl√®mes de loyaut√©", "effet": {"loyaut√©_tous": -random.randint(5, 15)}},
        {"nom": "Informateur", "effet": {"information_ennemi": True}},
    ]
    
    tous_√©v√©nements = √©v√©nements_contextuels + √©v√©nements_classiques
    return random.choice(tous_√©v√©nements)

def missions_complexes(player, subordinate_index):
    """Nouvelles missions avec choix multiples"""
    
    missions_avanc√©es = {
        "Infiltration Casino": {
            "description": "Voler les gains de la soir√©e poker VIP",
            "phases": [
                {
                    "nom": "Pr√©paration",
                    "choix": {
                        "√âtudier les plans": {"intelligence": +10, "temps": 2, "discr√©tion": +5},
                        "Soudoyer un employ√©": {"argent": -2000, "acc√®s_facile": True, "risque_trahison": 20},
                        "Improviser": {"risque": +15, "rapidit√©": True}
                    }
                },
                {
                    "nom": "Infiltration", 
                    "choix": {
                        "D√©guisement client": {"charisme_requis": 15, "discr√©tion": "haute"},
                        "Conduits d'a√©ration": {"discr√©tion_requise": 20, "difficile": True},
                        "Diversion ext√©rieure": {"complice_requis": True, "attention": "d√©tourn√©e"}
                    }
                }
            ],
            "r√©compense_base": 12000,
            "risques": ["Arrestation", "Blessure", "√âchec mission"]
        },
        
        "Sabotage Industriel": {
            "description": "Saboter l'usine de l'organisation rivale",
            "phases": [
                {
                    "nom": "Reconnaissance",
                    "choix": {
                        "Surveillance nocturne": {"temps": 3, "information": "compl√®te", "fatigue": +10},
                        "Infiltration jour": {"audace": True, "risque": +20, "rapidit√©": True},
                        "Contacts internes": {"r√©seau_requis": True, "fiabilit√©": "√©lev√©e"}
                    }
                }
            ],
            "cons√©quences_morales": {
                "sabotage_propre": {"r√©putation": +5, "moral": +5},
                "sabotage_sale": {"r√©putation": -10, "efficacit√©": +20, "moral": -15}
            }
        }
    }
    
    return random.choice(list(missions_avanc√©es.values()))

def next_turn_am√©lior√©(player, rival, turn_number):
    """Version am√©lior√©e de ta fonction next_turn"""
    
    print(f"\nüîÑ TOUR {turn_number}")
    
    # 1. V√©rification √©v√©nements de loyaut√©
    for i, sub in enumerate(player.subordonnes):
        if random.randint(1, 100) <= 10:  # 10% de chance
            print(f"\nüí≠ {sub.nom} semble avoir quelque chose √† vous dire...")
            if input("Voulez-vous lui parler ? (o/n): ").lower() == 'o':
                player.g√©rer_√©v√©nement_loyaut√©(i)
    
    # 2. R√©cup√©ration automatique
    for sub in player.subordonnes:
        if sub.fatigu√©:
            if random.randint(1, 100) <= 30:  # 30% de chance de r√©cup√©rer
                sub.fatigu√© = False
                print(f"üí™ {sub.nom} a r√©cup√©r√© de sa fatigue.")
        
        if sub.bless√©:
            if random.randint(1, 100) <= 20:  # 20% de chance de gu√©rir
                sub.bless√© = False
                print(f"üè• {sub.nom} s'est remis de ses blessures.")
    
    # 3. √âv√©nement al√©atoire contextuel
    if random.randint(1, 100) <= 30:  # 30% de chance
        √©v√©nement = √©v√©nements_al√©atoires_am√©lior√©s(player)
        print(f"\nüé≤ √âV√âNEMENT: {√©v√©nement['nom']}")
        print(√©v√©nement['description'])
        
        if 'choix' in √©v√©nement:
            choix_dispo = list(√©v√©nement['choix'].keys())
            for i, choix in enumerate(choix_dispo, 1):
                print(f"{i}. {choix}")
            
            try:
                choix_idx = int(input("Votre choix: ")) - 1
                choix_s√©lectionn√© = choix_dispo[choix_idx]
                effets = √©v√©nement['choix'][choix_s√©lectionn√©]
                
                # Applique les effets
                for effet, valeur in effets.items():
                    if effet == "argent":
                        player.argent += valeur
                        print(f"üí∞ Argent: {valeur:+d}$ (Total: {player.argent}$)")
                    elif effet == "r√©putation":
                        player.r√©putation += valeur
                        print(f"‚≠ê R√©putation: {valeur:+d} (Total: {player.r√©putation})")
                        
            except (ValueError, IndexError):
                print("Choix invalide, √©v√©nement ignor√©.")
    
    # 4. V√©rification mont√©e de niveau
    if player.v√©rifier_mont√©e_niveau():
        print(f"\nüéâ Votre organisation peut √©voluer !")
        if input("Voulez-vous faire √©voluer votre organisation ? (o/n): ").lower() == 'o':
            r√©sultat = player.monter_niveau_organisation()
            print(r√©sultat)
    
    # 5. Tes autres √©v√©nements existants...
    
    player.tour_actuel += 1